/**
    The exception module defines all system-level exceptions and provides a
    mechanism to alter system-level error handling.

    Copyright: Copyright Sean Kelly 2005 - 2013.
    License:   $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0).
    Authors:   Sean Kelly and $(HTTP jmdavisprog.com, Jonathan M Davis)
    Source:    $(DRUNTIMESRC core/_exception.d)
 */
module core.exception;
import core.stdc.stdlib;

// Compiler lowers final switch default case to this (which is a runtime error)
void __switch_errorT()(string file = __FILE__, size_t line = __LINE__) @trusted {
    assert(0, "No appropriate switch clause found");
}

/*
 * Make sure template __switch_errorT is always instantiated when building
 * druntime. This works around https://issues.dlang.org/show_bug.cgi?id=20802.
 * When druntime and phobos are compiled with -release, the instance for
 * __switch_errorT is not needed. An application compiled with -release
 * could need the instance for __switch_errorT, but the compiler would
 * not generate code for it, because it assumes, that it was already
 * generated for druntime. Always including the instance in a compiled
 * druntime allows to use an application without -release with druntime
 * with -release.
 */
private alias dummy__switch_errorT = __switch_errorT!();


/***********************************
 * These functions must be defined for any D program linked
 * against this library.
 */
/+
extern (C) void onAssertError(string file, size_t line);
extern (C) void onAssertErrorMsg(string file, size_t line, string msg);
extern (C) void onUnittestErrorMsg(string file, size_t line, string msg);
extern (C) void onRangeError(string file, size_t line);
extern (C) void onHiddenFuncError(Object o);
+/

/***********************************
 * Function calls to these are generated by the compiler and inserted into
 * the object code.
 */

extern (C)
{
    /* One of these three is called upon an assert() fail inside of a unittest block
     */
    void _d_unittestp(immutable(char)* file, uint line) {
        abort();
    }

    void _d_unittest_msg(string msg, string file, uint line) {
        abort();
    }

    void _d_unittest(string file, uint line) {
        abort();
    }

    /// Called when an invalid array index/slice or associative array key is accessed
    void _d_arrayboundsp(immutable(char*) file, uint line) {
        abort();
    }

    /// Called when an out of range slice of an array is created
    void _d_arraybounds_slicep(immutable(char*) file, uint line, size_t lower, size_t upper, size_t length) {
        abort();
    }

    /// Called when an out of range array index is accessed
    void _d_arraybounds_indexp(immutable(char*) file, uint line, size_t index, size_t length) {
        abort();
    }

    void _d_arraybounds(string file, size_t line) {

        version (WebAssembly) {
            import arsd.webassembly;
            eval(
                q{ console.error("Range error: " + $0 + ":" + $1 )},
                file, line);
        }
        else version (CustomRuntimePrinter)
            customRuntimePrinter("Range Error: ", file, ":", line);
        abort();
    }

    /// Called when an out of range slice of an array is created
    void _d_arraybounds_slice(string file, uint line, size_t lwr, size_t upr, size_t length) {
        version (WebAssembly) {
            import arsd.webassembly;
            eval(
                q{ console.error("Range error: " + $0 + ":" + $1 + " [" + $2 + ".." + $3 + "] <> " + $4)},
                file, line, lwr, upr, length);
        }
        else version (CustomRuntimePrinter)
            customRuntimePrinter("Range Error: ", file, ":", line, " [", lwr, "..", upr, "] <> ", length);
        abort();
    }

    /// Called when an out of range array index is accessed
    void _d_arraybounds_index(string file, uint line, size_t index, size_t length) {
        version (WebAssembly) {
            import arsd.webassembly;
            eval(
                q{ console.error("Array index " + $0  + " out of bounds '[0.."+$1+"]' " + $2 + ":" + $3)},
                index, length, file, line);
        }
        else version (CustomRuntimePrinter)
            customRuntimePrinter("Array index: ", index, " out of bounds '[0..", length, "]'", file, ":", line);
        abort();
    }
}